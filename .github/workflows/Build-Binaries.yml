# This is a basic workflow to help you get started with Actions

name: Build Binaries

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Generate-Bins:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Set up NodeJS on the build host
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          
      # Install the PKG package to allow for building binaries
      - name: Install PKG
        run: npm install -g pkg

      # Install the UI's dependencies
      - name: Install the UI project
        run: npm install
        working-directory: User-Interface
        
      # Install the servers dependencies
      - name: Install the Server project
        run: npm install
        working-directory: Server
      
      # Compile the Typescript files to JS
      - name: Build Server
        run: npm run-script build
        working-directory: Server
        
        # Build the UI static files and place them into the server's compiled folder.
      - name: Build the UI
        run: npm run-script build
        working-directory: User-Interface
        
      # Build the native binaries to be included as artifacts for publish
      - name: Build native binaries
        run: npx pkg .
        working-directory: Server
        
      # Upload the Windows EXE Arctifact to make them available to other processes
      - name: Upload Raw Windows EXE Artifact
        uses: actions/upload-artifact@v2
        with:
          name: WindowsRawExe
          path: Server/dist/privileged-security-management-server-win.exe

      # Upload the Windows EXE Arctifact to make them available to other processes
      - name: Upload Raw Linux bin Artifact
        uses: actions/upload-artifact@v2
        with:
          name: LinuxRawBin
          path: Server/dist/privileged-security-management-server-linux
#   Build-And-Publish-Snap:
#     # Ensure that the binaries are generated before executing this part of the build process.
#     needs: Generate-Bins
    
#     # Run the snap build command on the latest Ubuntu OS available
#     runs-on: ubuntu-latest
    
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Download the project's current source code
#       - name: Download project
#         uses: actions/checkout@v2

#       # Grab the bin file that was just generated by the BIN Build step
#       - name: Download Linux Bin
#         uses: actions/download-artifact@v3
#         with:
#           name: LinuxRawBin
#           path: Server/dist/

#       # Package the snap packaged based on the snapcraft.yaml file in the root of the source code repo
#       - name: Build Snap Package
#         uses: snapcore/action-build@v1
        
#       # Upload the built snap package to the store in edge mode
#       - uses: snapcore/action-publish@v1
#         with:
#           store_login: ${{ secrets.SNAP_STORE_EDGE_LOGIN }}
#           snap: ${{ steps.build.outputs.snap }}
#           release: edge

  # Authenticode-Sign:
  #   # This job can't procede if the EXE isn't present to sign
  #   needs: Generate-Bins

  #   # The type of runner that the job will run on
  #   runs-on: windows-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - name: Download the Windows Raw un-packaged exe Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         # Artifact name
  #         name: WindowsRawExe
  #         # Destination path
  #         path: Downloads

  #     # Runs a single command using the runners shell
  #     - name: Set up .Net CLI
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: "6.0.x"

  #     # Install the Azure Sign Tool for authenticode signing
  #     - name: Install Azure Sign Tool
  #       run: dotnet tool install --global AzureSignTool

  Package-WindowsInstallers:
    # This job can't procede if the EXE hasn't been generated or signed
    needs: [Generate-Bins]

    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Download project
        uses: actions/checkout@v2

      - name: Download EXE
        uses: actions/download-artifact@v3
        with:
          name: WindowsRawExe
          path: Server/dist/

      - name: Build MSI Installer
        uses: Caphyon/advinst-github-action@v1.0
        with:
          advinst-version: '19.6'
          advinst-license: ${{ secrets.ADVANCEDINSTALLER_KEY }}
          advinst-enable-automation: 'false'
          aip-path: 'Privileged Security Management.aip'
          aip-build-name: 'MSI'

        # Upload the Windows MSI Arctifact to make them available to other processes
      - name: Upload MSI Artifact
        uses: actions/upload-artifact@v2
        with:
          name: WindowsInstallerMSI
          path: Server/dist/PSM-Win-x64.msi

      - name: Build EXE Installer
        uses: Caphyon/advinst-github-action@v1.0
        with:
          advinst-version: '19.6'
          advinst-license: ${{ secrets.ADVANCEDINSTALLER_KEY }}
          advinst-enable-automation: 'false'
          aip-path: 'Privileged Security Management.aip'
          aip-build-name: 'EXE'
        
        # Upload the Windows EXE Arctifact to make them available to other processes
      - name: Upload EXE Artifact
        uses: actions/upload-artifact@v2
        with:
          name: WindowsInstallerEXE
          path: Server/dist/PSM-Win-x64.exe
